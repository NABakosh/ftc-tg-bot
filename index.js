const { Bot, InlineKeyboard, Keyboard } = require('grammy')
const fs = require('fs')
const { Client } = require('pg')
require('dotenv').config()

const app = express()

// –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ

let mode = 0

const startKey = new Keyboard().text('FLL').text('FTC').resized()

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL
const db = new Client({
	user: process.env.DB_USER,
	host: process.env.DB_HOST,
	database: process.env.DB_NAME,
	password: process.env.DB_PASSWORD,
	port: process.env.DB_PORT,
})

db.connect()

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot(process.env.BotApiKey)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ locales
const loadLanguages = path => {
	const languages = {}
	const files = fs.readdirSync(path)
	files.forEach(file => {
		const langCode = file.replace('.json', '') // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
		const langData = JSON.parse(fs.readFileSync(`${path}/${file}`, 'utf-8'))
		languages[langCode] = langData
	})
	return languages
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ locales
const languages = loadLanguages('./locales')

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
const getUserLanguage = async userId => {
	const res = await db.query('SELECT language FROM users WHERE user_id = $1', [
		userId,
	])
	return res.rows.length > 0 ? res.rows[0].language : null
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
const setUserLanguage = async (userId, language) => {
	const res = await db.query(
		`INSERT INTO users (user_id, language) VALUES ($1, $2) ON CONFLICT (user_id) DO UPDATE SET language = $2`,
		[userId, language]
	)
	return res
}

// –ö–æ–º–∞–Ω–¥–∞ /start —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
bot.command('start', async ctx => {
	mode = 0
	const userId = ctx.from.id

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —è–∑—ã–∫
	const savedLanguage = await getUserLanguage(userId)
	if (savedLanguage) {
		ctx.reply(languages[savedLanguage].start, {
			reply_markup: startKey,
			input_field_placeholder: '–û —á—ë–º –±—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?',
			disable_web_page_preview: true,
		})
		return ctx.reply(languages[savedLanguage].backQuestions)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
	const keyboard = new InlineKeyboard()
		.text('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru')
		.text('üá¨üáß English', 'lang_en')
		.text('üá∞üáø “ö–∞–∑–∞“õ—à–∞', 'lang_kz')

	await ctx.reply(languages['en'].choose_language, {
		reply_markup: keyboard,
	})
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
bot.callbackQuery(['lang_ru', 'lang_en', 'lang_kz'], async ctx => {
	const userId = ctx.from.id
	const chosenLang = ctx.callbackQuery.data.split('_')[1] // –ü–æ–ª—É—á–∞–µ–º "ru", "en" –∏–ª–∏ "kz"

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	await setUserLanguage(userId, chosenLang)

	const lang = (await getUserLanguage(userId)) || 'en'

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	const message = languages[chosenLang].language_set.replace(
		'{language}',
		chosenLang === 'ru'
			? '–†—É—Å—Å–∫–∏–π'
			: chosenLang === 'en'
			? 'English'
			: '“ö–∞–∑–∞“õ—à–∞'
	)

	await ctx.answerCallbackQuery(message)
	await ctx.reply(languages[chosenLang].start, {
		reply_markup: startKey,
		input_field_placeholder: '–û —á—ë–º –±—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?',
		disable_web_page_preview: true,
	})
})

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', async ctx => {
	const userId = ctx.from.id
	const lang = (await getUserLanguage(userId)) || 'en' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "en"
	await ctx.reply(languages[lang].help)
})

bot.on('message:text', async ctx => {
	const userId = ctx.from.id
	const lang = (await getUserLanguage(userId)) || 'en'
	let text = ctx.message.text.toLowerCase()
	console.log(languages[lang].FLLquestions[text])
	const keys = Object.keys(languages[lang])
	const fllKeys = Object.keys(languages[lang].FLLquestions)
	const ftcKeys = Object.keys(languages[lang].FTCquestions)
	console.log('the key', fllKeys)
	console.log(`mode: ${mode}`)

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–∞ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
	function findInJson(keys, searchValue) {
		return keys.find(key => key.toLowerCase() === searchValue)
	}

	const fllKeyboard = new Keyboard()
		.text(fllKeys[0])
		.text(fllKeys[1])
		.row()
		.text(fllKeys[2])
		.text(fllKeys[3])
		.row()
		.text(fllKeys[4])
		.text(fllKeys[5])
		.row()
		.text(fllKeys[6])
		.text(fllKeys[7])
		.resized()
	const ftcKeyboard = new Keyboard()
		.text(ftcKeys[0])
		.text(ftcKeys[1])
		.row()
		.text(ftcKeys[2])
		.text(ftcKeys[3])
		.row()
		.text(ftcKeys[4])
		.text(ftcKeys[5])
		.row()
		.text(ftcKeys[6])
		.text(ftcKeys[7])
		.row()
		.text(ftcKeys[8])
		.resized()

	const foundKey = findInJson(keys, text) // –ò—â–µ–º –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
	text = ctx.message.text
	console.log('text', text)
	console.log('Something :: ', text === ftcKeys[8])
	if (foundKey) {
		if (foundKey === 'FLL') {
			ctx.reply(languages[lang][foundKey], {
				reply_markup: fllKeyboard,
			})
			mode = 1
		}
		if (foundKey === 'FTC') {
			ctx.reply(languages[lang][foundKey], {
				reply_markup: ftcKeyboard,
			})
			mode = 2
		}
		if (mode === 0) {
			ctx.reply(languages[lang][foundKey], {
				disable_web_page_preview: true,
			})
		}
	}
	if (mode === 1 || mode === 2) {
		if (text === fllKeys[7]) {
			mode = 0
			ctx.reply(languages[lang].backQuestions, {
				reply_markup: startKey,
				disable_web_page_preview: true,
			})
		}
		if (languages[lang].FLLquestions[text]) {
			const reply = languages[lang].FLLquestions[text]
			ctx.reply(reply, {
				disable_web_page_preview: true,
			})
		}
	}
	if (mode === 2) {
		if (text === ftcKeys[8]	) {
			mode = 0
			ctx.reply(languages[lang].backquestions, {
				reply_markup: startKey,
				disable_web_page_preview: true,
			})
		}
		if (languages[lang].FTCquestions[text]) {
			const reply = languages[lang].FTCquestions[text]
			ctx.reply(reply, {
				disable_web_page_preview: true,
			})
		}
	}
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start()
